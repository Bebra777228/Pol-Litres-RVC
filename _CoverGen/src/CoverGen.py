import json
import os
import sys
import shutil
import urllib.request
import zipfile
from argparse import ArgumentParser

import gradio as gr

from main import song_cover_pipeline

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

mdxnet_models_dir = os.path.join(BASE_DIR, 'mdxnet_models')
rvc_models_dir = os.path.join(BASE_DIR, 'rvc_models')
output_dir = os.path.join(BASE_DIR, 'song_output')
image_path = "/content/CoverGen/content/CoverGen.png"

def get_current_models(models_dir):
    models_list = os.listdir(models_dir)
    items_to_remove = ['hubert_base.pt', 'MODELS.txt', 'public_models.json', 'rmvpe.pt']
    return [item for item in models_list if item not in items_to_remove]

def update_models_list():
    models_l = get_current_models(rvc_models_dir)
    return gr.Dropdown.update(choices=models_l)

def extract_zip(extraction_folder, zip_name):
    os.makedirs(extraction_folder)
    with zipfile.ZipFile(zip_name, 'r') as zip_ref:
        zip_ref.extractall(extraction_folder)
    os.remove(zip_name)

    index_filepath, model_filepath = None, None
    for root, dirs, files in os.walk(extraction_folder):
        for name in files:
            if name.endswith('.index') and os.stat(os.path.join(root, name)).st_size > 1024 * 100:
                index_filepath = os.path.join(root, name)

            if name.endswith('.pth') and os.stat(os.path.join(root, name)).st_size > 1024 * 1024 * 40:
                model_filepath = os.path.join(root, name)

    if not model_filepath:
        raise gr.Error(f'–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ .pth –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º zip-—Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ {extraction_folder}.')

    os.rename(model_filepath, os.path.join(extraction_folder, os.path.basename(model_filepath)))
    if index_filepath:
        os.rename(index_filepath, os.path.join(extraction_folder, os.path.basename(index_filepath)))

    for filepath in os.listdir(extraction_folder):
        if os.path.isdir(os.path.join(extraction_folder, filepath)):
            shutil.rmtree(os.path.join(extraction_folder, filepath))

def download_online_model(url, dir_name, progress=gr.Progress()):
    try:
        progress(0, desc=f'[~] –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å –∏–º–µ–Ω–µ–º {dir_name}...')
        zip_name = url.split('/')[-1]
        extraction_folder = os.path.join(rvc_models_dir, dir_name)
        if os.path.exists(extraction_folder):
            raise gr.Error(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ {dir_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏.')

        if 'pixeldrain.com' in url:
            url = f'https://pixeldrain.com/api/file/{zip_name}'

        urllib.request.urlretrieve(url, zip_name)

        progress(0.5, desc='[~] –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ zip-—Ñ–∞–π–ª–∞...')
        extract_zip(extraction_folder, zip_name)
        return f'[+] –ú–æ–¥–µ–ª—å {dir_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'

    except Exception as e:
        raise gr.Error(str(e))

def upload_local_model(zip_path, dir_name, progress=gr.Progress()):
    try:
        extraction_folder = os.path.join(rvc_models_dir, dir_name)
        if os.path.exists(extraction_folder):
            raise gr.Error(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ {dir_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏.')

        zip_name = zip_path.name
        progress(0.5, desc='[~] –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ zip-—Ñ–∞–π–ª–∞...')
        extract_zip(extraction_folder, zip_name)
        return f'[+] –ú–æ–¥–µ–ª—å {dir_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'

    except Exception as e:
        raise gr.Error(str(e))

def pub_dl_autofill(pub_models, event: gr.SelectData):
    return gr.Text.update(value=pub_models.loc[event.index[0], 'URL']), gr.Text.update(value=pub_models.loc[event.index[0], 'Model Name'])

def swap_visibility():
    return gr.update(visible=True), gr.update(visible=False), gr.update(value=''), gr.update(value=None)

def process_file_upload(file):
    return file.name, gr.update(value=file.name)

def show_hop_slider(pitch_detection_algo):
    if pitch_detection_algo == 'mangio-crepe':
        return gr.update(visible=True)
    else:
        return gr.update(visible=False)

if __name__ == '__main__':
    parser = ArgumentParser(description='–°–æ–∑–¥–∞—Ç—å AI-–∫–∞–≤–µ—Ä –ø–µ—Å–Ω–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ song_output/id.', add_help=True)
    parser.add_argument("--share", action="store_true", dest="share_enabled", default=False, help="–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    parser.add_argument("--listen", action="store_true", default=False, help="–°–¥–µ–ª–∞—Ç—å WebUI –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑ –≤–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.")
    parser.add_argument('--listen-host', type=str, help='–ò–º—è —Ö–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.')
    parser.add_argument('--listen-port', type=int, help='–ü–æ—Ä—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.')
    args = parser.parse_args()

    voice_models = get_current_models(rvc_models_dir)
    with open(os.path.join(rvc_models_dir, 'public_models.json'), encoding='utf8') as infile:
        public_models = json.load(infile)

    with gr.Blocks(title='CoverGen - Politrees (v0.2)') as app:

        with gr.Tab("–í–µ–ª–∫–æ–º/–ö–æ–Ω—Ç–∞–∫—Ç—ã"):
            gr.Image(value=image_path, interactive=False, show_download_button=False, container=False)
            gr.Markdown("<center><h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CoverGen - Politrees (v0.2)</h1></center>")
            with gr.Row():
                with gr.Column():
                    gr.HTML("<center><h2><a href='https://www.youtube.com/channel/UCHb3fZEVxUisnqLqCrEM8ZA'>YouTube: Politrees</a></h2></center>")
                    gr.HTML("<center><h2><a href='https://vk.com/artem__bebroy'>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞)</a></h2></center>")
                with gr.Column():
                    gr.HTML("<center><h2><a href='https://t.me/pol1trees'>Telegram –ö–∞–Ω–∞–ª</a></h2></center>")
                    gr.HTML("<center><h2><a href='https://t.me/+GMTP7hZqY0E4OGRi'>Telegram –ß–∞—Ç</a></h2></center>")

            gr.HTML("<center><h2><a href='https://github.com/Bebra777228/Pol-Litres-RVC'>GitHub –ø—Ä–æ–µ–∫—Ç–∞</a></h2></center>")

        with gr.Tab("CoverGen"):
            with gr.Accordion('–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'):
                with gr.Row():
                    with gr.Column():
                        rvc_model = gr.Dropdown(voice_models, label='–ú–æ–¥–µ–ª–∏ –≥–æ–ª–æ—Å–∞', info='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è `"CoverGen/_CoverGen/rvc_models"`. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"')
                        ref_btn = gr.Button('–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π üîÅ', variant='primary')

                    with gr.Column() as yt_link_col:
                        song_input = gr.Text(label='–í—Ö–æ–¥–Ω–∞—è –ø–µ—Å–Ω—è', info='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Å–Ω—é –Ω–∞ YouTube –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É')
                        #show_file_upload_button = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
                        song_input_file = gr.UploadButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', file_types=['audio'], variant='primary')
    
                    with gr.Column(visible=False) as file_upload_col:
                        local_file = gr.File(label='–ê—É–¥–∏–æ-—Ñ–∞–π–ª')
                        #song_input_file = gr.UploadButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å üìÇ', file_types=['audio'], variant='primary')
                        show_yt_link_button = gr.Button('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube / –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É')
                        song_input_file.upload(process_file_upload, inputs=[song_input_file], outputs=[local_file, song_input])
    
                    with gr.Column():
                        pitch = gr.Slider(-24, 24, value=0, step=1, label='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–æ–∫–∞–ª)', info='-24 - –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å || 24 - –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å')
                        pitch_all = gr.Slider(-12, 12, value=0, step=1, label='–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞', info='–ò–∑–º–µ–Ω—è–µ—Ç —Ç–æ–Ω/—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∫–∞–ª–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–µ. –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É—Ö—É–¥—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞.')
                    #show_file_upload_button.click(swap_visibility, outputs=[file_upload_col, yt_link_col, song_input, local_file])
                    show_yt_link_button.click(swap_visibility, outputs=[yt_link_col, file_upload_col, song_input, local_file])

            with gr.Accordion('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞', open=False):
                with gr.Row():
                    index_rate = gr.Slider(0, 1, value=0.5, label='–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏', info="–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º, —Å–∫–æ–ª—å–∫–æ –∞–∫—Ü–µ–Ω—Ç–∞ AI-–≥–æ–ª–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –≤–æ–∫–∞–ª–µ. –í—ã–±–æ—Ä –º–µ–Ω—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å–Ω–∏–∑–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –∞—É–¥–∏–æ")
                    filter_radius = gr.Slider(0, 7, value=3, step=1, label='–†–∞–¥–∏—É—Å —Ñ–∏–ª—å—Ç—Ä–∞', info='–ï—Å–ª–∏ >=3: –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–µ–¥–∏–∞–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞. –ú–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å —à—É–º –¥—ã—Ö–∞–Ω–∏—è')
                    rms_mix_rate = gr.Slider(0, 1, value=0.25, label='–°–∫–æ—Ä–æ—Å—Ç—å —Å–º–µ—à–∏–≤–∞–Ω–∏—è RMS', info="–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ (0) –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å (1)")
                    protect = gr.Slider(0, 0.5, value=0.33, label='–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã', info='–ó–∞—â–∏—â–∞–µ—Ç –≥–ª—É—Ö–∏–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –∏ –∑–≤—É–∫–∏ –¥—ã—Ö–∞–Ω–∏—è. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è 0,5 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∑–∞—â–∏—Ç—É')
                    with gr.Column():
                        f0_method = gr.Dropdown(['rmvpe', 'mangio-crepe'], value='rmvpe', label='–ú–µ—Ç–æ–¥ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞', info='–õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - rmvpe (—á–∏—Å—Ç–æ—Ç–∞ –≥–æ–ª–æ—Å–∞), –∑–∞—Ç–µ–º mangio-crepe (–±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–π –≥–æ–ª–æ—Å)')
                        crepe_hop_length = gr.Slider(32, 320, value=128, step=1, visible=False, label='–î–ª–∏–Ω–∞ —à–∞–≥–∞ Crepe', info='–ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ–¥—É—Ç –∫ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º –∏ –±–æ–ª—å—à–µ–º—É —Ä–∏—Å–∫—É —Ç—Ä–µ—â–∏–Ω –≤ –≥–æ–ª–æ—Å–µ, –Ω–æ –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–æ–Ω–∞')
                        f0_method.change(show_hop_slider, inputs=f0_method, outputs=crepe_hop_length)
                keep_files = gr.Checkbox(label='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã', info='–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ song_output/id, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –í–æ–∫–∞–ª/–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª', visible=False)

            with gr.Accordion('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ', open=False):
                gr.Markdown('<center><h2>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–¥–µ—Ü–∏–±–µ–ª)</h2></center>')
                with gr.Row():
                    main_gain = gr.Slider(-20, 20, value=0, step=1, label='–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–∫–∞–ª')
                    backup_gain = gr.Slider(-20, 20, value=0, step=1, label='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∫–∞–ª (–±—ç–∫–∏)')
                    inst_gain = gr.Slider(-20, 20, value=0, step=1, label='–ú—É–∑—ã–∫–∞')


                gr.Markdown('<center><h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π –≤ AI-–≤–æ–∫–∞–ª–µ</h2></center>')
                with gr.Row():
                    reverb_rm_size = gr.Slider(0, 1, value=0.15, label='–†–∞–∑–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã', info='–ß–µ–º –±–æ–ª—å—à–µ –∫–æ–º–Ω–∞—Ç–∞, —Ç–µ–º –¥–æ–ª—å—à–µ –≤—Ä–µ–º—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')
                    reverb_wet = gr.Slider(0, 1, value=0.2, label='–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏', info='–£—Ä–æ–≤–µ–Ω—å AI-–≤–æ–∫–∞–ª–∞ —Å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π')
                    reverb_dry = gr.Slider(0, 1, value=0.8, label='–£—Ä–æ–≤–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏', info='–£—Ä–æ–≤–µ–Ω—å AI-–≤–æ–∫–∞–ª–∞ –±–µ–∑ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')
                    reverb_damping = gr.Slider(0, 1, value=0.7, label='–£—Ä–æ–≤–µ–Ω—å –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è', info='–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –≤ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')


            with gr.Row():
                with gr.Column(scale=2, min_width=100, min_height=100):
                    generate_btn = gr.Button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", variant='primary', scale=1, min_width=100, min_height=100)

                with gr.Column(scale=5):
                    ai_cover = gr.Audio(label='AI-–∫–∞–≤–µ—Ä', show_share_button=False)
                    with gr.Accordion("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã", open=False):
                        main_vocals_dereverb = gr.Audio(label='–í–æ–∫–∞–ª', show_share_button=False)
                        backup_vocals = gr.Audio(label='–ë—ç–∫ –≤–æ–∫–∞–ª', show_share_button=False)
                        instrumentals = gr.Audio(label='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª', show_share_button=False)

                with gr.Column(scale=1, min_width=100, min_height=100):
                    output_format = gr.Dropdown(['mp3', 'wav'], value='mp3', label='–¢–∏–ø –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞', scale=0.5)
                    clear_btn = gr.ClearButton(value='–°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', components=[song_input, rvc_model, keep_files, local_file], min_width=100, min_height=100)


            ref_btn.click(lambda: [None, update_models_list()], outputs=[rvc_model, rvc_model])
            is_webui = gr.Number(value=1, visible=False)
            generate_btn.click(song_cover_pipeline,
                               inputs=[song_input, rvc_model, pitch, keep_files, is_webui, main_gain, backup_gain,
                                       inst_gain, index_rate, filter_radius, rms_mix_rate, f0_method, crepe_hop_length,
                                       protect, pitch_all, reverb_rm_size, reverb_wet, reverb_dry, reverb_damping,
                                       output_format],
                               outputs=[ai_cover, main_vocals_dereverb, backup_vocals, instrumentals])
            clear_btn.click(lambda: [0, 0, 0, 0, 0.5, 3, 0.25, 0.33, 'rmvpe', 128, 0, 0.15, 0.2, 0.8, 0.7, 'mp3', None, None, None, None],
                            outputs=[pitch, main_gain, backup_gain, inst_gain, index_rate, filter_radius, rms_mix_rate,
                                    protect, f0_method, crepe_hop_length, pitch_all, reverb_rm_size, reverb_wet,
                                    reverb_dry, reverb_damping, output_format, ai_cover, main_vocals_dereverb, backup_vocals, instrumentals])

#        with gr.Tab("Video-CoverGen"):
#            gr.Label('–≠—Ç–æ –Ω–∞ –±—É–¥—É—â–µ–µ, –µ—Å–ª–∏ –Ω–∞–π–¥—É —Å–∏–ª—ã —Å–¥–µ–ª–∞—Ç—å)', show_label=False)

        with gr.Tab('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏'):
            with gr.Tab('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ'):
                with gr.Row():
                    model_zip_link = gr.Text(label='–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏', info='–≠—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ zip-—Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ .pth –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª .index.', scale = 3)
                    model_name = gr.Text(label='–ò–º—è –º–æ–¥–µ–ª–∏', info='–î–∞–π—Ç–µ –≤–∞—à–µ–π –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.', scale = 1.5)

                with gr.Row():
                    dl_output_message = gr.Text(label='–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞', interactive=False, scale=3)
                    download_btn = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å', variant='primary', scale=1.5)

                download_btn.click(download_online_model, inputs=[model_zip_link, model_name], outputs=dl_output_message)

            with gr.Tab('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ'):
                gr.Markdown('## –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ RVC v2 –∏ —Ñ–∞–π–ª–∞ –∏–Ω–¥–µ–∫—Å–∞')
                gr.Markdown('- –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ (–ø–∞–ø–∫–∞ weights) –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–Ω–¥–µ–∫—Å–∞ (–ø–∞–ø–∫–∞ logs/[–∏–º—è])')
                gr.Markdown('- –°–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ zip-—Ñ–∞–π–ª')
                gr.Markdown('- –ó–∞–≥—Ä—É–∑–∏—Ç—å zip-—Ñ–∞–π–ª –∏ –¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≥–æ–ª–æ—Å—É')
                gr.Markdown('- –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"')
    
                with gr.Row():
                    with gr.Column(scale=2):
                        zip_file = gr.File(label='Zip-—Ñ–∞–π–ª')

                    with gr.Column(scale=1.5):
                        local_model_name = gr.Text(label='–ò–º—è –º–æ–¥–µ–ª–∏', info='–î–∞–π—Ç–µ –≤–∞—à–µ–π –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.')
                        model_upload_button = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å', variant='primary')

                with gr.Row():
                    local_upload_output_message = gr.Text(label='–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞', interactive=False)
                    model_upload_button.click(upload_local_model, inputs=[zip_file, local_model_name], outputs=local_upload_output_message)

    app.launch(
        share=True,
        enable_queue=True,
        server_name=None if not args.listen else (args.listen_host or '0.0.0.0'),
        server_port=args.listen_port,
    )
