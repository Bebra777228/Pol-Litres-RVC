import json
import os
import shutil
import urllib.request
import zipfile
from argparse import ArgumentParser
import gradio as gr

import sys
sys.path.append('/content/CoverGen/_CoverGen/src')
from main import song_cover_pipeline
from mega.mega import Mega
import requests
from bs4 import BeautifulSoup


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

mdxnet_models_dir = os.path.join(BASE_DIR, '_CoverGen/mdxnet_models')
rvc_models_dir = os.path.join(BASE_DIR, '_CoverGen/rvc_models')
output_dir = os.path.join(BASE_DIR, '_CoverGen/song_output')

image_path = "/content/CoverGen/content/CoverGen1855.png"

def get_current_models(models_dir):
    models_list = os.listdir(models_dir)
    items_to_remove = ['hubert_base.pt', 'MODELS.txt', 'public_models.json', 'rmvpe.pt']
    return [item for item in models_list if item not in items_to_remove]

def update_models_list():
    models_l = get_current_models(rvc_models_dir)
    return gr.Dropdown.update(choices=models_l)

def load_public_models():
    models_table = []
    for model in public_models['voice_models']:
        if not model['name'] in voice_models:
            model = [model['name'], model['description'], model['credit'], model['url'], ', '.join(model['tags'])]
            models_table.append(model)

    tags = list(public_models['tags'].keys())
    return gr.DataFrame.update(value=models_table), gr.CheckboxGroup.update(choices=tags)

def extract_zip(extraction_folder, zip_name):
    os.makedirs(extraction_folder)
    with zipfile.ZipFile(zip_name, 'r') as zip_ref:
        zip_ref.extractall(extraction_folder)
    os.remove(zip_name)

    index_filepath, model_filepath = None, None
    for root, dirs, files in os.walk(extraction_folder):
        for name in files:
            if name.endswith('.index') and os.stat(os.path.join(root, name)).st_size > 1024 * 100:
                index_filepath = os.path.join(root, name)

            if name.endswith('.pth') and os.stat(os.path.join(root, name)).st_size > 1024 * 1024 * 40:
                model_filepath = os.path.join(root, name)

    if not model_filepath:
        raise gr.Error(f'–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª .pth –º–æ–¥–µ–ª–∏ –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º zip. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ {extraction_folder}.')

    os.rename(model_filepath, os.path.join(extraction_folder, os.path.basename(model_filepath)))
    if index_filepath:
        os.rename(index_filepath, os.path.join(extraction_folder, os.path.basename(index_filepath)))

    for filepath in os.listdir(extraction_folder):
        if os.path.isdir(os.path.join(extraction_folder, filepath)):
            shutil.rmtree(os.path.join(extraction_folder, filepath))

def download_online_model(url, dir_name, progress=gr.Progress()):
    try:
        progress(0, desc=f'[~] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–æ–ª–æ—Å–∞ —Å –∏–º–µ–Ω–µ–º {dir_name}...')
        zip_name = url.split('/')[-1]
        extraction_folder = os.path.join(rvc_models_dir, dir_name)
        if os.path.exists(extraction_folder):
            raise gr.Error(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–∏ –≥–æ–ª–æ—Å–∞ {dir_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ –≥–æ–ª–æ—Å–∞.')

        if 'pixeldrain.com' in url:
            url = f'https://pixeldrain.com/api/file/{zip_name}'

        if 'drive.google.com' in url:
            if '/view' in url:
                url_parts = url.split('/')
                file_id = url_parts[-2]
                download_url = f'https://drive.google.com/uc?id={file_id}'
            else:
                download_url = url
            urllib.request.urlretrieve(download_url, zip_name)

        elif '/blob/' in url:
            url = url.replace('blob', 'resolve')
            urllib.request.urlretrieve(url, zip_name)

        elif 'mega.nz' in url:
            m = Mega()
            m.download_url(url, extraction_folder)
            shutil.move(extraction_folder + zip_name, '.')

        elif '/tree/main' in url:
            response = requests.get(url)
            soup = BeautifulSoup(response.content, 'html.parser')
            temp_url = ''
            for link in soup.find_all('a', href=True):
                if link['href'].endswith('.zip'):
                    temp_url = link['href']
                    break
            if temp_url:
                url = temp_url
                url = url.replace('blob', 'resolve')

                if 'huggingface.co' not in url:
                    url = 'https://huggingface.co' + url

                urllib.request.urlretrieve(url, zip_name)
            else:
                raise gr.Error('–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª .zip.')

        else:
            urllib.request.urlretrieve(url, zip_name)

        progress(0.5, desc='[~] –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ zip...')
        extract_zip(extraction_folder, zip_name)
        return f'[+] {dir_name} –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'

    except Exception as e:
        raise gr.Error(str(e))

def upload_local_model(zip_path, dir_name, progress=gr.Progress()):
    try:
        extraction_folder = os.path.join(rvc_models_dir, dir_name)
        if os.path.exists(extraction_folder):
            raise gr.Error(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–∏ –≥–æ–ª–æ—Å–∞ {dir_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ –≥–æ–ª–æ—Å–∞.')

        zip_name = zip_path.name
        progress(0.5, desc='[~] –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ zip...')
        extract_zip(extraction_folder, zip_name)
        return f'[+] {dir_name} –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'

    except Exception as e:
        raise gr.Error(str(e))


def pub_dl_autofill(pub_models, event: gr.SelectData):
    return gr.Text.update(value=pub_models.loc[event.index[0], 'URL']), gr.Text.update(value=pub_models.loc[event.index[0], 'Model Name'])

def swap_visibility():
    return gr.update(visible=True), gr.update(visible=False), gr.update(value=''), gr.update(value=None)

def process_file_upload(file):
    return file.name, gr.update(value=file.name)

def show_hop_slider(pitch_detection_algo):
    if pitch_detection_algo == 'mangio-crepe':
        return gr.update(visible=True)
    else:
        return gr.update(visible=False)



app = gr.Blocks(title='CoverGen - Politrees')


if __name__ == '__main__':
    parser = ArgumentParser(description='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI-–∫–∞–≤–µ—Ä –ø–µ—Å–Ω–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ song_output/id.', add_help=True)
    parser.add_argument("--share", action="store_true", dest="share_enabled", default=False, help="–í–∫–ª—é—á–∏—Ç—å –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø")
    parser.add_argument("--listen", action="store_true", default=False, help="–°–¥–µ–ª–∞—Ç—å WebUI –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑ –≤–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.")
    parser.add_argument('--listen-host', type=str, help='–ò–º—è —Ö–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.')
    parser.add_argument('--listen-port', type=int, help='–ü–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.')
    args = parser.parse_args()

    voice_models = get_current_models(rvc_models_dir)
    with open(os.path.join(rvc_models_dir, 'public_models.json'), encoding='utf8') as infile:
        public_models = json.load(infile)

    with app:
        with gr.Tabs():
            with gr.TabItem("–ö–æ–Ω—Ç–∞–∫—Ç—ã"):
                    gr.Image(value=image_path)

            with gr.TabItem("CoverGen"):
                with gr.Tab("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"):
                    with gr.Accordion('–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'):
                        with gr.Row():
                            with gr.Column():
                                rvc_model = gr.Dropdown(voice_models, label='–ú–æ–¥–µ–ª–∏ –≥–æ–ª–æ—Å–∞', info='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "AICoverGen --> rvc_models". –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"')
                                ref_btn = gr.Button('–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π üîÅ', variant='primary')

                            with gr.Column() as yt_link_col:
                                song_input = gr.Text(label='–í–≤–æ–¥ –ø–µ—Å–Ω–∏', info='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Å–Ω—é –Ω–∞ YouTube –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
                                show_file_upload_button = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Ñ–∞–π–ª')

                            with gr.Column(visible=False) as file_upload_col:
                                local_file = gr.File(label='–ê—É–¥–∏–æ-—Ñ–∞–π–ª')
                                song_input_file = gr.UploadButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å üìÇ', file_types=['audio'], variant='primary')
                                show_yt_link_button = gr.Button('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube / –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É')
                                song_input_file.upload(process_file_upload, inputs=[song_input_file], outputs=[local_file, song_input])

                            with gr.Column():
                                pitch = gr.Slider(-3, 3, value=0, step=1, label='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞ (–¢–û–õ–¨–ö–û –≥–æ–ª–æ—Å)', info='–û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1 –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ –≤ –∂–µ–Ω—Å–∫–∏–π –∏ -1 –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. (–û–∫—Ç–∞–≤—ã)')
                                pitch_all = gr.Slider(-12, 12, value=0, step=1, label='–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞', info='–ò–∑–º–µ–Ω—è–µ—Ç –≤—ã—Å–æ—Ç—É —Ç–æ–Ω–∞/—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–µ. –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ö—É–¥—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞. (–ü–æ–ª—É—Ç–æ–Ω—ã)')
                            show_file_upload_button.click(swap_visibility, outputs=[file_upload_col, yt_link_col, song_input, local_file])
                            show_yt_link_button.click(swap_visibility, outputs=[yt_link_col, file_upload_col, song_input, local_file])

                    with gr.Accordion('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞', open=False):
                        with gr.Row():
                            index_rate = gr.Slider(0, 1, value=0.5, label='–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞', info="–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º, —Å–∫–æ–ª—å–∫–æ –∞–∫—Ü–µ–Ω—Ç–∞ AI-–≥–æ–ª–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≥–æ–ª–æ—Å–µ")
                            filter_radius = gr.Slider(0, 7, value=3, step=1, label='–†–∞–¥–∏—É—Å —Ñ–∏–ª—å—Ç—Ä–∞', info='–ï—Å–ª–∏ >=3: –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–±–æ—Ä–∫–∏ –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞. –ú–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å —à—É–º –¥—ã—Ö–∞–Ω–∏—è')
                            rms_mix_rate = gr.Slider(0, 1, value=0.25, label='–°–∫–æ—Ä–æ—Å—Ç—å —Å–º–µ—à–∏–≤–∞–Ω–∏—è RMS', info="–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ (0) –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å (1)")
                            protect = gr.Slider(0, 0.5, value=0.33, label='–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã', info='–ó–∞—â–∏—â–∞–µ—Ç –≥–ª—É—Ö–∏–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –∏ –∑–≤—É–∫–∏ –¥—ã—Ö–∞–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0.5, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å.')
                            with gr.Column():
                                f0_method = gr.Dropdown(['rmvpe', 'mangio-crepe'], value='rmvpe', label='–ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞', info='–õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - rmvpe (—á–∏—Å—Ç–æ—Ç–∞ –≥–æ–ª–æ—Å–∞), –∑–∞—Ç–µ–º mangio-crepe (–±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–π –≥–æ–ª–æ—Å)')
                                crepe_hop_length = gr.Slider(32, 320, value=128, step=1, visible=False, label='–î–ª–∏–Ω–∞ —à–∞–≥–∞ Crepe', info='–ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –∏ –±–æ–ª—å—à–µ–º—É —Ä–∏—Å–∫—É –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ—â–∏–Ω –≤ –≥–æ–ª–æ—Å–µ, –Ω–æ –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞.')
                                f0_method.change(show_hop_slider, inputs=f0_method, outputs=crepe_hop_length)
                        keep_files = gr.Checkbox(label='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã', info='–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ song_output/id, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.')

                    with gr.Accordion('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ', open=False):
                        gr.Markdown('### –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–¥–µ—Ü–∏–±–µ–ª—ã)')
                        with gr.Row():
                            main_gain = gr.Slider(-20, 20, value=0, step=1, label='–û—Å–Ω–æ–≤–Ω–æ–π –≥–æ–ª–æ—Å')
                            backup_gain = gr.Slider(-20, 20, value=0, step=1, label='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å (–±—ç–∫–∏)')
                            inst_gain = gr.Slider(-20, 20, value=0, step=1, label='–ú—É–∑—ã–∫–∞')

                        gr.Markdown('### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π AI-–≥–æ–ª–æ—Å–∞')
                        with gr.Row():
                            reverb_rm_size = gr.Slider(0, 1, value=0.15, label='–†–∞–∑–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã', info='–ß–µ–º –±–æ–ª—å—à–µ –∫–æ–º–Ω–∞—Ç–∞, —Ç–µ–º –¥–æ–ª—å—à–µ –≤—Ä–µ–º—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')
                            reverb_wet = gr.Slider(0, 1, value=0.2, label='–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏', info='–£—Ä–æ–≤–µ–Ω—å AI-–≥–æ–ª–æ—Å–∞ —Å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π')
                            reverb_dry = gr.Slider(0, 1, value=0.8, label='–£—Ä–æ–≤–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏', info='–£—Ä–æ–≤–µ–Ω—å AI-–≥–æ–ª–æ—Å–∞ –±–µ–∑ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')
                            reverb_damping = gr.Slider(0, 1, value=0.7, label='–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è', info='–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –≤ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')

                        gr.Markdown('### –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ')
                        output_format = gr.Dropdown(['mp3', 'wav'], value='mp3', label='–¢–∏–ø –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞', info='mp3: –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –ø—Ä–∏–µ–º–ª–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. wav: –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ')

                    with gr.Row():
                        generate_btn = gr.Button("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", variant='primary', scale = 2)
                        ai_cover = gr.Audio(label='AI-–∫–∞–≤–µ—Ä', show_share_button=False, scale = 5)
                        clear_btn = gr.ClearButton(value='–°–±—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', components=[song_input, rvc_model, keep_files, local_file], scale = 0.5)

                    ref_btn.click(update_models_list, None, outputs=rvc_model)
                    is_webui = gr.Number(value=1, visible=False)
                    generate_btn.click(song_cover_pipeline,
                                      inputs=[song_input, rvc_model, pitch, keep_files, is_webui, main_gain, backup_gain,
                                              inst_gain, index_rate, filter_radius, rms_mix_rate, f0_method, crepe_hop_length,
                                              protect, pitch_all, reverb_rm_size, reverb_wet, reverb_dry, reverb_damping,
                                              output_format],
                                      outputs=[ai_cover])
                    clear_btn.click(lambda: [0, 0, 0, 0, 0.5, 3, 0.25, 0.33, 'rmvpe', 128, 0, 0.15, 0.2, 0.8, 0.7, 'mp3', None],
                                    outputs=[pitch, main_gain, backup_gain, inst_gain, index_rate, filter_radius, rms_mix_rate,
                                            protect, f0_method, crepe_hop_length, pitch_all, reverb_rm_size, reverb_wet,
                                            reverb_dry, reverb_damping, output_format, ai_cover])

                with gr.Tab("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"):

                    with gr.Row():
                        model_zip_link = gr.Text(label='–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏', info='–î–æ–ª–∂–µ–Ω –±—ã—Ç—å zip-—Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ .pth –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª .index.', scale = 3)
                        model_name = gr.Text(label='–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏', info='–î–∞–π—Ç–µ –≤–∞—à–µ–π –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –≤–∞—à–∏—Ö –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –≥–æ–ª–æ—Å–∞.', scale = 1.5)

                    with gr.Row():
                        dl_output_message = gr.Text(label='–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞', interactive=False, scale=3)
                        download_btn = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å üåê', variant='primary', scale=1)

                    download_btn.click(download_online_model, inputs=[model_zip_link, model_name], outputs=dl_output_message)


                with gr.Tab("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å"):
                    gr.Markdown('## –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å RVC v2 –∏ —Ñ–∞–π–ª –∏–Ω–¥–µ–∫—Å–∞')
                    gr.Markdown('- –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ (–ø–∞–ø–∫–∞ weights) –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–Ω–¥–µ–∫—Å–∞ (–ø–∞–ø–∫–∞ logs/[–∏–º—è –º–æ–¥–µ–ª–∏])')
                    gr.Markdown('- –°–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ zip-–∞—Ä—Ö–∏–≤')
                    gr.Markdown('- –ó–∞–≥—Ä—É–∑–∏—Ç—å zip-–∞—Ä—Ö–∏–≤ –∏ –¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≥–æ–ª–æ—Å–∞')
                    gr.Markdown('- –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"')

                    with gr.Row():
                        with gr.Column(scale=2):
                            zip_file = gr.File(label='Zip-—Ñ–∞–π–ª')

                        with gr.Column(scale=1.5):
                            local_model_name = gr.Text(label='–ò–º—è –º–æ–¥–µ–ª–∏', info='–î–∞–π—Ç–µ –≤–∞—à–µ–π –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –≤–∞—à–∏—Ö –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –≥–æ–ª–æ—Å–∞.')
                            model_upload_button = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å', variant='primary')

                    with gr.Row():
                        local_upload_output_message = gr.Text(label='–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞', interactive=False)
                        model_upload_button.click(upload_local_model, inputs=[zip_file, local_model_name], outputs=local_upload_output_message)

    app.launch(
        share=True,
        enable_queue=True,
        server_name=None if not args.listen else (args.listen_host or '0.0.0.0'),
        server_port=args.listen_port,
    )
